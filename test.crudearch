CRUDARCHv1{"files": {"main.py": {"type": "py", "content": "ZnJvbSB1aWVkaXRvciBpbXBvcnQgVUlFZGl0b3INCmltcG9ydCB0a2ludGVyIGFzIHRrDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgcm9vdCA9IHRrLlRrKCkNCiAgICBlZGl0b3IgPSBVSUVkaXRvcihyb290KQ0KICAgIHJvb3QubWFpbmxvb3AoKQ0K"}, "uieditor.py": {"type": "py", "content": "import json
import os
import platform
import time
import subprocess
import traceback
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, colorchooser
from typing import Optional, Dict, Any, Callable
from project import Project
from uielements import UIElement, Panel, Button, Label, TextBox, ContainerElement
from scene import Scene
from typing import Optional

class EventEditor:
    """Custom event editor handler with automatic embedding"""
    def __init__(self, parent_frame):
        self.parent_frame = parent_frame
        self.editor_process = None
        self.editor_hwnd = None
        self.current_project = None
        self.embed_canvas = None
        self.console_line = 0
        self.error_line = 0  # Track error message position
        self.create_editor_ui()
        self.embed_editor()
        
    def create_editor_ui(self):
        """Create the editor UI components"""
        self.editor_frame = ttk.Frame(self.parent_frame)
        self.editor_frame.pack(fill=tk.BOTH, expand=True)
        
        # Button controls frame
        self.control_frame = ttk.Frame(self.editor_frame)
        self.control_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(self.control_frame, 
                  text="Run Project", 
                  command=self.run_project).pack(side=tk.LEFT, padx=2)
        ttk.Button(self.control_frame, 
                  text="Refresh Editor", 
                  command=self.refresh_editor).pack(side=tk.LEFT, padx=2)
        
        # Canvas for embedding with dark background
        self.embed_canvas = tk.Canvas(
            self.editor_frame, 
            bg='#2d2d2d', 
            highlightthickness=0
        )
        self.embed_canvas.pack(fill=tk.BOTH, expand=True)

    # Add Console Output frame at bottom
        self.console_frame = ttk.LabelFrame(self.editor_frame, 
                                          text="Console Output", 
                                          height=150)
        self.console_frame.pack(fill=tk.X, padx=5, pady=5)
        self.console_frame.pack_propagate(False)  # Fixed height
        
        self.console_text = tk.Text(
            self.console_frame, 
            wrap=tk.WORD, 
            state='disabled',
            bg='black',
            fg='white',
            font=('Consolas', 9)
        )
        self.console_scroll = ttk.Scrollbar(self.console_frame,
                                          orient=tk.VERTICAL,
                                          command=self.console_text.yview)
        self.console_text.configure(yscrollcommand=self.console_scroll.set)
        
        self.console_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.console_text.pack(fill=tk.BOTH, expand=True)
    

    def display_error(self, message):
        """Display error on both canvas and console"""
        self.error_line += 1
        y_position = 20 + (self.error_line * 20)
        
        # Canvas display (brief)
        self.embed_canvas.create_text(
            10, y_position,
            text=message.split('\n')[0][:100],  # Show first line truncated
            anchor=tk.NW,
            fill="white",
            font=('Consolas', 10),
            tags="error"
        )
        
        # Full error to console
        self.log_to_console(f"ERROR: {message}")
        
        if y_position > self.embed_canvas.winfo_height():
            self.embed_canvas.yview_moveto(1.0)

    def log_to_console(self, message):
        """Add message to console output"""
        self.console_text.config(state='normal')
        self.console_line += 1
        self.console_text.insert(tk.END, f"{self.console_line}: {message}\n")
        self.console_text.config(state='disabled')
        self.console_text.see(tk.END)  # Auto-scroll to bottom

    def clear_errors(self):
        """Clear both canvas and console errors"""
        self.embed_canvas.delete("error")
        self.error_line = 0
        self.console_text.config(state='normal')
        self.console_text.delete(1.0, tk.END)
        self.console_text.config(state='disabled')
        self.console_line = 0
    

    def get_editor_executable(self):
        """Get platform-specific editor executable with error handling"""
        try:
            base_path = os.path.join(os.path.dirname(__file__), "eventeditor")
            if not os.path.exists(base_path):
                raise FileNotFoundError(f"Editor directory not found: {base_path}")
                
            system = platform.system().lower()
            executables = {
                'windows': 'crudetext.exe',
                'linux': 'crudetext_linux',
                'darwin': 'crudetext_mac'
            }
            
            exe_name = executables.get(system)
            print(exe_name)
            if not exe_name:
                raise ValueError(f"Unsupported platform: {system}")
                
            exe_path = os.path.join(base_path, exe_name)
            print(exe_path)
            if not os.path.exists(exe_path):
                raise FileNotFoundError(f"Editor executable not found: {exe_path}")
                
            return exe_path
            
        except Exception as e:
            self.display_error(f"Error locating editor executable:\n{traceback.format_exc()}")
            raise
        
    def embed_editor(self):
        """Embed the editor with comprehensive error handling"""
        try:
            editor_exe = self.get_editor_executable()
            self.launch_editor_process(editor_exe)
            
            if platform.system() == 'Windows':
                self.embed_windows_editor()
            elif platform.system() == 'Linux':
                self.embed_linux_editor()
            elif platform.system() == 'Darwin':
                self.embed_mac_editor()
                
        except Exception as e:
            self.display_error(f"Failed to embed editor:\n{traceback.format_exc()}")
    
    def launch_editor_process(self, editor_exe):
        """Launch editor process with error handling"""
        try:
            creationflags = 0
            if platform.system() == 'Windows':
                import win32process
                creationflags = (subprocess.CREATE_NO_WINDOW | 
                               subprocess.CREATE_NEW_PROCESS_GROUP)
                
            self.editor_process = subprocess.Popen(
                [editor_exe],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=creationflags
            )
            
        except Exception as e:
            self.display_error(f"Failed to launch editor process:\n{traceback.format_exc()}")
            raise
    
    def embed_windows_editor(self):
        """Windows-specific embedding with robust error handling"""
        try:
            import win32gui
            import win32con
            
            # Wait for editor window with timeout
            start_time = time.time()
            timeout = 5  # seconds
            self.editor_hwnd = None
            
            while time.time() - start_time < timeout:
                try:
                    # Try to find window by class name if title doesn't work
                    self.editor_hwnd = win32gui.FindWindow("CrudeTextClass", None) or \
                                      win32gui.FindWindow(None, "CrudeText")
                    if self.editor_hwnd:
                        break
                except Exception:
                    pass
                time.sleep(0.1)
            
            if not self.editor_hwnd:
                raise RuntimeError(f"Editor window not found after {timeout} seconds")
            
            # Get canvas window ID
            canvas_hwnd = int(self.embed_canvas.winfo_id())
            
            # Set parent and modify styles
            win32gui.SetParent(self.editor_hwnd, canvas_hwnd)
            style = (win32con.WS_VISIBLE | win32con.WS_CHILD | 
                    win32con.WS_CLIPCHILDREN | win32con.WS_CLIPSIBLINGS)
            win32gui.SetWindowLong(self.editor_hwnd, win32con.GWL_STYLE, style)
            
            # Initial resize
            self.resize_editor_to_canvas()
            
            # Bind resize handler
            self.embed_canvas.bind("<Configure>", self.on_canvas_resize)
            
        except Exception as e:
            self.display_error(f"Windows embedding failed:\n{traceback.format_exc()}")
            raise
    
    
    def on_canvas_resize(self, event):
        """Handle canvas resize with error handling"""
        try:
            self.resize_editor_to_canvas()
        except Exception as e:
            self.display_error(f"Resize error:\n{traceback.format_exc()}")
    
    def resize_editor_to_canvas(self):
        """Resize editor to fit canvas with error handling"""
        if platform.system() == 'Windows' and self.editor_hwnd:
            try:
                import win32gui
                width = max(10, self.embed_canvas.winfo_width())
                height = max(10, self.embed_canvas.winfo_height())
                
                win32gui.MoveWindow(
                    self.editor_hwnd,
                    0, 0,
                    width, height,
                    True
                )
            except Exception as e:
                self.display_error(f"Window resize failed:\n{traceback.format_exc()}")
                raise
    
    def run_project(self):
        """Run project with comprehensive error handling"""
        self.clear_errors()  # Clear previous errors
        
        if not self.current_project:
            self.display_error("Error: No project loaded")
            return
            
        try:
            if not self.current_project.main_file:
                raise ValueError("No main file specified in project")
                
            script_path = os.path.join(self.current_project.project_dir, 
                                     self.current_project.main_file)
            if not os.path.exists(script_path):
                raise FileNotFoundError(f"Script not found: {script_path}")
                
            python_exec = self.current_project.python_path or "python"
            
            # Run with platform-specific commands
            if platform.system() == 'Windows':
                subprocess.Popen(
                    ['start', 'cmd', '/k', python_exec, script_path],
                    shell=True,
                    cwd=self.current_project.project_dir
                )
            else:
                subprocess.Popen(
                    [python_exec, script_path],
                    cwd=self.current_project.project_dir
                )
                
        except Exception as e:
            self.display_error(f"Failed to run project:\n{traceback.format_exc()}")
    
    def refresh_editor(self):
        """Refresh editor with error handling"""
        self.clear_errors()
        
        try:
            if self.editor_process:
                try:
                    if platform.system() == 'Windows' and self.editor_hwnd:
                        import win32gui
                        win32gui.DestroyWindow(self.editor_hwnd)
                    self.editor_process.terminate()
                except Exception:
                    pass
                
            # Clear and re-embed
            self.embed_canvas.delete("all")
            self.editor_hwnd = None
            self.editor_process = None
            self.embed_editor()
            
        except Exception as e:
            self.display_error(f"Failed to refresh editor:\n{traceback.format_exc()}")
class UIEditor:
    """Main editor application"""
    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("OpenGL UI Editor")
        self.root.geometry("1200x800")
        self.visible_var = None
        self.current_project = Project()
        self.current_project.width = 800
        self.current_project.height = 600
        self.selected_element: Optional[UIElement] = None
        self.canvas_padding_x = 20
        self.canvas_padding_y = 20
        self.element_properties = {}  # Add this line
        self.scene_properties = {}    # Add this line
        self.project_settings = {}    # Add this line
        self.placing_element = None
        self.temp_element = None
        
        self.create_widgets()
        self.setup_bindings()

    # --------------------------
    # UI Creation Methods
    # --------------------------

    def create_widgets(self):
        self.main_pane = tk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        self.main_pane.pack(fill=tk.BOTH, expand=True)
        
        self.left_panel = ttk.Frame(self.main_pane, width=250)
        self.create_hierarchy_panel(self.left_panel)
        self.main_pane.add(self.left_panel)
        
        self.center_panel = ttk.Frame(self.main_pane)
        self.create_workspace_notebook(self.center_panel)
        self.main_pane.add(self.center_panel)
        
        self.right_panel = ttk.Frame(self.main_pane, width=300)
        self.create_properties_panel(self.right_panel)
        self.main_pane.add(self.right_panel)

    def create_workspace_notebook(self, parent):
        self.workspace_notebook = ttk.Notebook(parent)
        self.workspace_notebook.pack(fill=tk.BOTH, expand=True)
        
        self.ui_preview_tab = ttk.Frame(self.workspace_notebook)
        self.workspace_notebook.add(self.ui_preview_tab, text="UI Preview")
        self.create_scrollable_workspace(self.ui_preview_tab)
        
        # Event Editor tab with container frame
        self.event_editor_tab = ttk.Frame(self.workspace_notebook)
        self.workspace_notebook.add(self.event_editor_tab, text="Event Editor")
        
        self.event_editor_container = ttk.Frame(self.event_editor_tab)
        self.event_editor_container.pack(fill=tk.BOTH, expand=True)
        
        # Initialize the event editor
        self.event_editor = EventEditor(self.event_editor_container)
        self.event_editor.current_project = self.current_project

    def create_project_settings_ui(self, parent):
        """Enhanced project settings with editor configuration"""
        # Project directory
        ttk.Label(parent, text="Project Path:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        self.project_path_entry = ttk.Entry(parent)
        self.project_path_entry.grid(row=0, column=1, sticky=tk.EW, padx=5, pady=2)
        
        # Main file
        ttk.Label(parent, text="Main File:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=2)
        self.main_file_entry = ttk.Entry(parent)
        self.main_file_entry.grid(row=1, column=1, sticky=tk.EW, padx=5, pady=2)
        
        # Python path
        ttk.Label(parent, text="Python Path:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=2)
        self.python_path_entry = ttk.Entry(parent)
        self.python_path_entry.grid(row=2, column=1, sticky=tk.EW, padx=5, pady=2)
        
        # Save button
        #ttk.Button(parent, text="Save Settings", command=self.save_project_settings).grid(row=3, column=0, columnspan=2, pady=10)
        
        parent.columnconfigure(1, weight=1)
    
    def save_project_settings(self):
        """Save project settings including editor configuration"""
        self.current_project.project_dir = self.project_path_entry.get()
        self.current_project.main_file = self.main_file_entry.get()
        self.current_project.python_path = self.python_path_entry.get()
        
        # Update the event editor with new settings
        if hasattr(self, 'event_editor'):
            self.event_editor.current_project = self.current_project
    def create_scrollable_workspace(self, parent):
        """Create scrollable workspace area"""
        container = ttk.Frame(parent)
        container.pack(fill=tk.BOTH, expand=True)
        
        # Create scrollbars
        self.vscrollbar = ttk.Scrollbar(container, orient=tk.VERTICAL)
        self.hscrollbar = ttk.Scrollbar(container, orient=tk.HORIZONTAL)
        
        # Create canvas with proper scrollregion formatting
        self.workspace_canvas = tk.Canvas(
            container,
            bg="#e0e0e0",
            yscrollcommand=self.vscrollbar.set,
            xscrollcommand=self.hscrollbar.set,
            scrollregion=(
                0, 
                0, 
                self.current_project.width + (2 * self.canvas_padding_x), 
                self.current_project.height + (2 * self.canvas_padding_y)
            )
        )
        
        # Layout components
        self.workspace_canvas.grid(row=0, column=0, sticky="nsew")
        self.vscrollbar.grid(row=0, column=1, sticky="ns")
        self.hscrollbar.grid(row=1, column=0, sticky="ew")
        
        # Configure scrollbars
        self.vscrollbar.config(command=self.workspace_canvas.yview)
        self.hscrollbar.config(command=self.workspace_canvas.xview)
        
        # Configure grid weights
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        
        # Create the project canvas
        self.canvas = tk.Canvas(
            self.workspace_canvas,
            bg="white",
            width=self.current_project.width,
            height=self.current_project.height,
            highlightthickness=0
        )
        
        # Place the project canvas with padding
        self.canvas_window = self.workspace_canvas.create_window(
            (self.canvas_padding_x, self.canvas_padding_y),
            window=self.canvas,
            anchor="nw",
            tags="project_canvas"
        )
        
        # Bind configuration events
        self.canvas.bind("<Configure>", self.on_project_canvas_configure)
        self.workspace_canvas.bind("<Configure>", self.on_workspace_configure)

    def create_hierarchy_panel(self, parent):
        scene_frame = ttk.LabelFrame(parent, text="Scenes", padding=5)
        scene_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(scene_frame, text="Add Scene", command=self._add_scene).pack(fill=tk.X, padx=5, pady=2)
        ttk.Button(scene_frame, text="Remove Scene", command=self._remove_scene).pack(fill=tk.X, padx=5, pady=2)
        
        hierarchy_frame = ttk.LabelFrame(parent, text="Hierarchy", padding=5)
        hierarchy_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.hierarchy_tree = ttk.Treeview(hierarchy_frame, columns=("type",))
        self.hierarchy_tree.heading("#0", text="Name")
        self.hierarchy_tree.heading("type", text="Type")
        self.hierarchy_tree.column("type", width=100)
        self.hierarchy_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=2)
        self.hierarchy_tree.bind("<<TreeviewSelect>>", self.on_element_selected)
        
        self.context_menu = tk.Menu(self.hierarchy_tree, tearoff=0)
        self.context_menu.add_command(label="Copy", command=self.copy_element)
        self.context_menu.add_command(label="Paste", command=self.paste_element)
        self.context_menu.add_command(label="Remove", command=self.remove_selected_element)
        self.hierarchy_tree.bind("<Button-3>", self.show_context_menu)
        
        element_frame = ttk.Frame(parent, padding=5)
        element_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(element_frame, text="Add Panel", command=lambda: self.add_ui_element(Panel)).grid(row=0, column=0, padx=2, sticky=tk.EW)
        ttk.Button(element_frame, text="Add Button", command=lambda: self.add_ui_element(Button)).grid(row=0, column=1, padx=2, sticky=tk.EW)
        ttk.Button(element_frame, text="Add Label", command=lambda: self.add_ui_element(Label)).grid(row=1, column=0, padx=2, sticky=tk.EW)
        ttk.Button(element_frame, text="Add TextBox", command=lambda: self.add_ui_element(TextBox)).grid(row=1, column=1, padx=2, sticky=tk.EW)
        
        element_frame.columnconfigure(0, weight=1)
        element_frame.columnconfigure(1, weight=1)

    # --------------------------
    # Event Handlers
    # --------------------------
    
    def setup_bindings(self):
        """Set up keyboard and mouse bindings for the editor"""
        # Canvas bindings for element interaction
        self.canvas.bind("<Button-1>", self.on_canvas_click)
        self.canvas.bind("<B1-Motion>", self.on_canvas_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_canvas_release)
        
        # Keyboard shortcuts
        self.root.bind("<Delete>", lambda e: self.remove_selected_element())
        self.root.bind("<Control-s>", lambda e: self.save_project())
        self.root.bind("<Control-o>", lambda e: self.load_project())
        
        # Selection handling
        self.hierarchy_tree.bind("<<TreeviewSelect>>", self.on_element_selected)

    def on_canvas_click(self, event):
        """Handle mouse click on canvas"""
        if self.placing_element:
            return
            
        # Find clicked element
        x, y = event.x, event.y
        self.selected_element = self._get_element_at_position(x, y)
        
        if self.selected_element:
            self.drag_start_pos = (x, y)
            self.update_element_properties()
            self.redraw_canvas()

    def on_canvas_drag(self, event):
        """Handle element dragging on canvas"""
        if not hasattr(self, 'selected_element') or not self.selected_element:
            return
            
        x, y = event.x, event.y
        dx = x - self.drag_start_pos[0]
        dy = y - self.drag_start_pos[1]
        
        self.selected_element.x += dx
        self.selected_element.y += dy
        self.drag_start_pos = (x, y)
        self.redraw_canvas()

    def on_canvas_release(self, event):
        """Handle mouse release after dragging"""
        if hasattr(self, 'drag_start_pos'):
            del self.drag_start_pos
        self.update_element_properties()

    def _add_scene(self):
        """Add a new scene to the project"""
        scene_count = len(self.current_project.scene_manager.scenes) + 1
        scene_name = f"Scene_{scene_count}"
        
        scene = Scene(scene_name)
        self.current_project.scene_manager.add_scene(scene)
        self.current_project.scene_manager.set_current_scene(scene_name)
        
        self.refresh_hierarchy_visuals()
        self.update_scene_properties()
        
        # Select the new scene in hierarchy
        scene_node_id = f"scene_{scene_name}"
        for child in self.hierarchy_tree.get_children():
            if self.hierarchy_tree.item(child, 'tags')[0] == scene_node_id:
                self.hierarchy_tree.selection_set(child)
                self.hierarchy_tree.focus(child)
                break

    def _remove_scene(self):
        """Remove the currently selected scene"""
        selected_item = self.hierarchy_tree.focus()
        if not selected_item:
            return
        
        tags = self.hierarchy_tree.item(selected_item, 'tags')
        if not tags or not tags[0].startswith("scene_"):
            return
        
        scene_name = tags[0][6:]
        if messagebox.askyesno("Confirm", f"Delete scene '{scene_name}'?"):
            self.current_project.scene_manager.remove_scene(scene_name)
            self.refresh_hierarchy_visuals()
            self.selected_element = None
            self.update_element_properties()
            
            if self.current_project.scene_manager.scenes:
                first_scene = next(iter(self.current_project.scene_manager.scenes.values()))
                self.current_project.scene_manager.set_current_scene(first_scene.name)
                self.update_scene_properties()
    
    def on_project_canvas_configure(self, event):
        """Update scroll region when project canvas changes size"""
        total_width = self.current_project.width + (2 * self.canvas_padding_x)
        total_height = self.current_project.height + (2 * self.canvas_padding_y)
        self.workspace_canvas.configure(scrollregion=(0, 0, total_width, total_height))

    def on_workspace_configure(self, event):
        """Handle workspace canvas resizing"""
        pass

    def on_element_selected(self, event):
        """Handle selection in hierarchy tree"""
        selected_item = self.hierarchy_tree.focus()
        if not selected_item:
            self.selected_element = None
            self.update_element_properties()
            return

        tags = self.hierarchy_tree.item(selected_item, 'tags')
        if not tags:
            return

        if tags[0].startswith("scene_"):
            scene_name = tags[0][6:]
            scene = self.current_project.scene_manager.scenes.get(scene_name)
            if scene:
                self.current_project.scene_manager.set_current_scene(scene_name)
                self.selected_element = None
                self.update_scene_properties()
                self.update_element_properties()
                self.notebook.select(self.scene_properties_frame)
                self.redraw_canvas()
            return

        element_id = tags[0][8:] if tags[0].startswith("element_") else tags[0]
        element = self.find_element_by_id(element_id)

        if element:
            scene = self.get_element_scene(element)
            if scene:
                self.current_project.scene_manager.set_current_scene(scene.name)
            self.selected_element = element
            self.update_scene_properties()
            self.update_element_properties()
            self.notebook.select(self.element_properties_frame)
            self.redraw_canvas()

    def show_context_menu(self, event):
        """Display context menu on right-click"""
        item = self.hierarchy_tree.identify_row(event.y)
        if item:
            self.hierarchy_tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)

    def copy_element(self):
        """Copy selected element to clipboard"""
        if self.selected_element:
            self.clipboard = self.selected_element
            print(f"Copied: {self.selected_element.name}")

    def paste_element(self):
        """Paste element from clipboard"""
        if hasattr(self, 'clipboard') and self.clipboard:
            try:
                import copy
                element_copy = copy.deepcopy(self.clipboard)
                element_copy.name = f"{element_copy.name}_copy"
                
                selected_item = self.hierarchy_tree.focus()
                if selected_item:
                    tags = self.hierarchy_tree.item(selected_item, 'tags')
                    if tags:
                        if tags[0].startswith("scene_"):
                            scene = self.current_project.scene_manager.scenes[tags[0][6:]]
                            scene.elements.append(element_copy)
                        else:
                            element = self.find_element_by_id(tags[0])
                            if isinstance(element, ContainerElement):
                                element.add_child(element_copy)
                
                self.refresh_hierarchy_visuals()
                self.redraw_canvas()
            except Exception as e:
                messagebox.showerror("Error", f"Failed to paste element: {str(e)}")

    # --------------------------
    # Element Management
    # --------------------------
    
    def _get_element_at_position(self, x, y):
        """Find element at given canvas coordinates"""
        scene = self.current_project.scene_manager.current_scene
        if not scene:
            return None
            
        # Check elements in reverse draw order (top-most first)
        for element in reversed(scene.elements + scene.panels):
            if self._is_point_in_element(x, y, element):
                return element
        return None

    def _is_point_in_element(self, x, y, element):
        """Check if point is inside an element's bounds"""
        abs_x, abs_y = element.get_absolute_position()
        return (abs_x <= x <= abs_x + element.width and
                abs_y <= y <= abs_y + element.height)
    
    def add_ui_element(self, element_class):
        """Enter placement mode for new element"""
        self.placing_element = element_class
        self.temp_element = self.canvas.create_rectangle(
            0, 0, 100, 50, fill="grey", stipple="gray50"
        )
        self.canvas.bind("<Motion>", self.update_temp_element_position)
        self.canvas.bind("<Button-1>", self.finalize_element_placement)
        self.canvas.bind("<Escape>", self.cancel_element_placement)

    def update_temp_element_position(self, event):
        """Update temporary element position during placement"""
        if self.temp_element:
            x1, y1 = event.x, event.y
            x2, y2 = x1 + 100, y1 + 50
            self.canvas.coords(self.temp_element, x1, y1, x2, y2)

    def finalize_element_placement(self, event):
        """Finalize element placement on canvas"""
        if not self.placing_element:
            return
        
        x, y = event.x, event.y
        self.canvas.delete(self.temp_element)
        
        target_scene = self.current_project.scene_manager.current_scene
        if not target_scene:
            return

        # Fixed this line - properly closed parenthesis
        element_count = sum(
            1 for element in target_scene.elements 
            if isinstance(element, self.placing_element)
        )
        
        element_name = f"{self.placing_element.__name__}_{element_count}"
        new_element = self.placing_element(element_name, x=x, y=y)
        target_scene.elements.append(new_element)
        
        self.refresh_hierarchy_visuals()
        self.redraw_canvas()
        self.placing_element = None
        self.temp_element = None
        self.canvas.unbind("<Motion>")
        self.canvas.unbind("<Button-1>")
        self.canvas.unbind("<Escape>")

    def cancel_element_placement(self, event):
        """Cancel element placement"""
        self.canvas.delete(self.temp_element)
        self.placing_element = None
        self.temp_element = None
        self.canvas.unbind("<Motion>")
        self.canvas.unbind("<Button-1>")
        self.canvas.unbind("<Escape>")

    def remove_selected_element(self):
        """Remove currently selected element"""
        if self.selected_element:
            scene = self.get_element_scene(self.selected_element)
            if scene:
                if self.selected_element in scene.elements:
                    scene.elements.remove(self.selected_element)
                else:
                    for panel in scene.panels:
                        if self.selected_element in panel.children:
                            panel.children.remove(self.selected_element)
            
            self.refresh_hierarchy_visuals()
            self.redraw_canvas()
            self.selected_element = None
            self.update_element_properties()

    # --------------------------
    # Property Management
    # --------------------------

    def create_properties_panel(self, parent):
        """Create the properties notebook with tabs"""
        self.notebook = ttk.Notebook(parent)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Element Properties Tab
        self.element_properties_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.element_properties_frame, text="Element Properties")
        self.create_element_properties_ui(self.element_properties_frame)
        
        # Scene Properties Tab
        self.scene_properties_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.scene_properties_frame, text="Scene Properties")
        self.create_scene_properties_ui(self.scene_properties_frame)
        
        # Project Settings Tab
        self.project_settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.project_settings_frame, text="Project Settings")
        self.create_project_settings_ui(self.project_settings_frame)

    def create_element_properties_ui(self, parent):
        """Create the element properties editing UI"""
        self.element_properties = {}  # Initialize if not already done
        
        # Common properties frame
        common_frame = ttk.LabelFrame(parent, text="Common Properties", padding=5)
        common_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Create all property fields
        properties = [
            ('Name:', 'name', 'entry'),
            ('X:', 'x', 'spinbox', 0, 10000),
            ('Y:', 'y', 'spinbox', 0, 10000),
            ('Width:', 'width', 'spinbox', 1, 10000),
            ('Height:', 'height', 'spinbox', 1, 10000),
            ('Corner Radius:', 'corner_radius', 'spinbox', 0, 100),
            ('Background Color:', 'background_color', 'color'),
            ('Border Thickness', 'border_thickness', 'spinbox', 0, 100),
            ('Border Color:', 'border_color', 'color'),
            ('Text Color:', 'text_color', 'color'),
            ('Text', 'text', 'entry')
        ]
        
        for row, (label, prop, field_type, *args) in enumerate(properties):
            ttk.Label(common_frame, text=label).grid(row=row, column=0, sticky=tk.W)
            
            if field_type == 'entry':
                self.element_properties[prop] = ttk.Entry(common_frame)
            elif field_type == 'spinbox':
                self.element_properties[prop] = ttk.Spinbox(common_frame, from_=args[0], to=args[1])
            elif field_type == 'color':
                self.element_properties[prop] = ttk.Entry(common_frame)
                ttk.Button(common_frame, text="...", width=3,
                          command=lambda p=prop: self.choose_color(p)).grid(row=row, column=2, padx=5)
            
            self.element_properties[prop].grid(row=row, column=1, sticky=tk.EW, padx=5, pady=2)
        
        # Visibility checkbox
        self.visible_var = tk.BooleanVar()
        self.element_properties['visible'] = ttk.Checkbutton(
            common_frame, text="Visible", variable=self.visible_var)
        self.element_properties['visible'].grid(row=len(properties), column=0, columnspan=2, sticky=tk.W, padx=5, pady=2)
    


        # Element-specific properties will be added dynamically
        self.element_specific_frame = ttk.LabelFrame(parent, text="Element Specific", padding=5)
        self.element_specific_frame.pack(fill=tk.X, padx=5, pady=5)

        # Events panel
        self.events_frame = ttk.LabelFrame(parent, text="Events", padding=5)
        self.events_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.event_combobox = ttk.Combobox(
            self.events_frame, 
            values=["on_click", "on_hover", "on_key_press"]
        )
        self.event_combobox.pack(fill=tk.X, padx=5, pady=2)
        
        self.event_function_entry = ttk.Entry(self.events_frame)
        self.event_function_entry.pack(fill=tk.X, padx=5, pady=2)

        
        
        # Fixed: Changed to use underscore prefix for consistency
        ttk.Button(
            self.events_frame, 
            text="Attach Event", 
            command=self._attach_event_to_element
        ).pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Button(parent, text="Save Changes", command=self.save_element_properties).pack(fill=tk.X, padx=5, pady=10)

    def _attach_event_to_element(self):
        """Attach an event handler to the selected element"""
        if not self.selected_element:
            messagebox.showwarning("Warning", "No element selected")
            return
            
        event_type = self.event_combobox.get()
        function_name = self.event_function_entry.get()
        
        if not event_type:
            messagebox.showwarning("Warning", "Please select an event type")
            return
            
        if not function_name:
            messagebox.showwarning("Warning", "Please enter a function name")
            return
            
        try:
            # In a real implementation, we'd validate the function exists
            self.selected_element.attach_event(event_type, function_name)
            messagebox.showinfo("Success", f"Attached {function_name} to {event_type}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to attach event: {str(e)}")

    def choose_color(self, property_name):
        """Open color chooser dialog for color properties"""
        color = colorchooser.askcolor(title=f"Choose {property_name.replace('_', ' ').title()}")
        if color[1]:  # hex color selected
            self.element_properties[property_name].delete(0, tk.END)
            self.element_properties[property_name].insert(0, color[1])

    def save_element_properties(self):
        """Save changes made in element properties panel"""
        if not self.selected_element:
            return

        try:
            # Update common properties
            self.selected_element.name = self.element_properties['name'].get()
            self.selected_element.x = float(self.element_properties['x'].get())
            self.selected_element.y = float(self.element_properties['y'].get())
            self.selected_element.width = float(self.element_properties['width'].get())
            self.selected_element.height = float(self.element_properties['height'].get())
            self.selected_element.visible = self.visible_var.get()
            self.selected_element.corner_radius = self.element_properties['corner_radius'].get()
            
            # Update colors
            color_props = ['background_color', 'border_color', 'text_color']
            for prop in color_props:
                if prop in self.element_properties:
                    color = self.element_properties[prop].get()
                    if color.startswith("#"):
                        self.selected_element.__setattr__(prop, color)
            
            # Update element-specific properties
            if isinstance(self.selected_element, (Button, Label, TextBox)):
                if 'text' in self.element_properties:
                    self.selected_element.text = self.element_properties['text'].get()
            
            if isinstance(self.selected_element, (Label, TextBox)):
                if 'font_size' in self.element_properties:
                    self.selected_element.font_size = int(self.element_properties['font_size'].get())
            
            if isinstance(self.selected_element, TextBox):
                if 'multiline' in self.element_properties:
                    self.selected_element.multiline = bool(self.element_properties['multiline'].get())
            
            self.redraw_canvas()
            messagebox.showinfo("Success", "Properties saved successfully")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save properties: {str(e)}")
    
    def update_scene_properties(self):
        """Update the scene properties panel with current scene data"""
        scene = self.current_project.scene_manager.current_scene
        if not scene:
            return
            
        # Update name field
        self.scene_properties['name'].delete(0, tk.END)
        self.scene_properties['name'].insert(0, scene.name)
        
        # Update background color
        bg_color = scene.properties.get('background_color', (0.2, 0.2, 0.2, 1.0))
        self.scene_properties['background_color'].delete(0, tk.END)
        
        # Convert color to hex if it's a tuple
        if isinstance(bg_color, tuple):
            bg_color = "#%02x%02x%02x" % tuple(int(c*255) for c in bg_color[:3])
        self.scene_properties['background_color'].insert(0, bg_color)
    
    def update_element_properties(self):
        """Update the properties panel with current element's data"""
        if not self.selected_element:
            # Clear fields if no element selected
            for prop in ['name', 'x', 'y', 'width', 'height', 
                        'background_color', 'border_color', 'text_color',
                        'corner_radius']:
                if prop in self.element_properties:
                    self.element_properties[prop].delete(0, tk.END)
            return

        # Update common properties
        for prop in ['name', 'x', 'y', 'width', 'height', 'corner_radius']:
            if hasattr(self.selected_element, prop):
                self.element_properties[prop].delete(0, tk.END)
                self.element_properties[prop].insert(0, str(getattr(self.selected_element, prop)))

        # Update visibility checkbox
        if hasattr(self.selected_element, 'visible'):
            self.element_properties['visible'].state(['!alternate'])
            if self.selected_element.visible:
                self.element_properties['visible'].state(['selected'])

        # Update color properties
        for color_prop in ['background_color', 'border_color', 'text_color']:
            if hasattr(self.selected_element, color_prop):
                color = getattr(self.selected_element, color_prop)
                if isinstance(color, tuple):  # Convert RGBA tuple to hex
                    color = "#%02x%02x%02x" % tuple(int(c*255) for c in color[:3])
                self.element_properties[color_prop].delete(0, tk.END)
                self.element_properties[color_prop].insert(0, color)

        # Update element-specific properties
        for widget in self.element_specific_frame.winfo_children():
            widget.destroy()

        if isinstance(self.selected_element, (Button, Label, TextBox)):
            # Create element-specific controls here
            pass
    

    # --------------------------
    # Scene and Project Property Management
    # --------------------------

    def create_scene_properties_ui(self, parent):
        """Create UI for editing scene properties"""
        self.scene_properties = {}
        
        ttk.Label(parent, text="Scene Name:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        self.scene_properties['name'] = ttk.Entry(parent)
        self.scene_properties['name'].grid(row=0, column=1, sticky=tk.EW, padx=5, pady=2)
        
        ttk.Label(parent, text="Background Color:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=2)
        self.scene_properties['background_color'] = ttk.Entry(parent)
        self.scene_properties['background_color'].grid(row=1, column=1, sticky=tk.EW, padx=5, pady=2)
        ttk.Button(parent, text="...", width=3, 
                  command=lambda: self.choose_color('background_color', self.scene_properties)).grid(row=1, column=2, padx=5)
        
        ttk.Button(parent, text="Save Scene Properties", command=self.save_scene_properties).grid(
            row=2, column=0, columnspan=2, sticky=tk.EW, padx=5, pady=10)
        
        parent.columnconfigure(1, weight=1)

    def save_scene_properties(self):
        """Save changes made in scene properties panel"""
        scene = self.current_project.scene_manager.current_scene
        if not scene:
            return

        try:
            new_name = self.scene_properties['name'].get()
            if new_name != scene.name:
                # Handle scene rename
                scenes = self.current_project.scene_manager.scenes
                scenes[new_name] = scenes.pop(scene.name)
                scene.name = new_name
                self.refresh_hierarchy_visuals()
            
            # Update background color
            bg_color = self.scene_properties['background_color'].get()
            if bg_color:
                scene.properties['background_color'] = bg_color
            
            self.redraw_canvas()
            messagebox.showinfo("Success", "Scene properties saved")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save scene properties: {str(e)}")

    def create_project_settings_ui(self, parent):
        """Create UI for editing project settings"""
        self.project_settings = {}
        
        ttk.Label(parent, text="Project Name:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        self.project_settings['name'] = ttk.Entry(parent)
        self.project_settings['name'].grid(row=0, column=1, sticky=tk.EW, padx=5, pady=2)
        
        ttk.Label(parent, text="Default Width:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=2)
        self.project_settings['default_width'] = ttk.Spinbox(parent, from_=100, to=10000)
        self.project_settings['default_width'].grid(row=1, column=1, sticky=tk.EW, padx=5, pady=2)
        
        ttk.Label(parent, text="Default Height:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=2)
        self.project_settings['default_height'] = ttk.Spinbox(parent, from_=100, to=10000)
        self.project_settings['default_height'].grid(row=2, column=1, sticky=tk.EW, padx=5, pady=2)
        
        ttk.Label(parent, text="Theme:").grid(row=3, column=0, sticky=tk.W, padx=5, pady=2)
        self.project_settings['theme'] = ttk.Combobox(parent, values=["dark", "light"])
        self.project_settings['theme'].grid(row=3, column=1, sticky=tk.EW, padx=5, pady=2)
       
        # Project paths
        ttk.Label(parent, text="Project Path:").grid(row=4, column=0, sticky=tk.W, padx=5, pady=2)
        self.project_settings['project_dir'] = ttk.Entry(parent, width=50)
        self.project_settings['project_dir'].grid(row=4, column=1, sticky=tk.EW, padx=5, pady=2)
        self.project_settings['project_dir'].insert(0, self.current_project.project_dir or "")
        
        ttk.Label(parent, text="Main File:").grid(row=5, column=0, sticky=tk.W, padx=5, pady=2)
        self.project_settings['main_file'] = ttk.Entry(parent, width=50)
        self.project_settings['main_file'].grid(row=5, column=1, sticky=tk.EW, padx=5, pady=2)
        self.project_settings['main_file'].insert(0, self.current_project.main_file or "")
        
        ttk.Label(parent, text="Python Path:").grid(row=6, column=0, sticky=tk.W, padx=5, pady=2)
        self.project_settings['python_dir'] = ttk.Entry(parent, width=50)
        self.project_settings['python_dir'].grid(row=6, column=1, sticky=tk.EW, padx=5, pady=2)
        self.project_settings['python_dir'].insert(0, self.current_project.python_dir or "")


        ttk.Button(parent, text="Save Project Settings", command=self.save_project_settings).grid(
            row=7, column=0, columnspan=2, sticky=tk.EW, padx=5, pady=10)
        
        # Project actions
        ttk.Button(parent, text="Save Project", command=self.save_project).grid(
            row=8, column=0, columnspan=2, sticky=tk.EW, padx=5, pady=5)
        ttk.Button(parent, text="Load Project", command=self.load_project).grid(
            row=9, column=0, columnspan=2, sticky=tk.EW, padx=5, pady=5)
        ttk.Button(parent, text="Build Application", command=self.build_application).grid(
            row=10, column=0, columnspan=2, sticky=tk.EW, padx=5, pady=5)
        
        parent.columnconfigure(1, weight=1)

    def save_project_settings(self):
        """Save project settings from properties panel"""
        try:
            self.current_project.name = self.project_settings['name'].get()
            self.current_project.preferences['default_width'] = int(
                self.project_settings['default_width'].get())
            self.current_project.preferences['default_height'] = int(
                self.project_settings['default_height'].get())
            self.current_project.preferences['theme'] = self.project_settings['theme'].get()
            
            messagebox.showinfo("Success", "Project settings saved")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save project settings: {str(e)}")

    # --------------------------
    # Project I/O Operations
    # --------------------------

    def save_project(self, filename: Optional[str] = None):
        """Save current project to file"""
        if not filename:
            filename = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            if not filename:
                return
        
        try:
            with open(filename, 'w') as f:
                json.dump(self.current_project.to_dict(), f, indent=2)
            messagebox.showinfo("Success", f"Project saved to {filename}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save project: {str(e)}")

    def load_project(self, filename: Optional[str] = None):
        """Load project from file"""
        if not filename:
            filename = filedialog.askopenfilename(
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            if not filename:
                return
        
        try:
            with open(filename, 'r') as f:
                data = json.load(f)
            self.current_project = Project.from_dict(data)
            
            # Update UI
            self.refresh_hierarchy_visuals()
            self.update_project_settings()
            self.redraw_canvas()
            
            messagebox.showinfo("Success", f"Project loaded from {filename}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load project: {str(e)}")

    # --------------------------
    # Utility Methods
    # --------------------------

    def refresh_hierarchy_visuals(self):
        """Refresh the hierarchy tree view"""
        self.hierarchy_tree.delete(*self.hierarchy_tree.get_children())
        
        for scene in self.current_project.scene_manager.scenes.values():
            scene_node = self.hierarchy_tree.insert(
                "", "end",
                text=scene.name,
                tags=(f"scene_{scene.name}",),
                values=("Scene",)
            )
            
            # Add direct elements
            for element in scene.elements:
                self._add_element_to_tree(scene_node, element)
            
            # Add panels and their children
            for panel in scene.panels:
                panel_node = self._add_element_to_tree(scene_node, panel)
                for child in panel.children:
                    self._add_element_to_tree(panel_node, child)
        
        # Expand all nodes
        for child in self.hierarchy_tree.get_children():
            self.hierarchy_tree.item(child, open=True)

    def _add_element_to_tree(self, parent, element: UIElement):
        """Helper to add an element to hierarchy tree"""
        item = self.hierarchy_tree.insert(
            parent, "end",
            text=element.name,
            tags=(f"element_{element.name}",),
            values=(element.__class__.__name__,)
        )
        
        if isinstance(element, ContainerElement):
            for child in element.children:
                self._add_element_to_tree(item, child)
        return item

    def get_element_scene(self, element: UIElement) -> Optional[Scene]:
        """Find which scene contains the given element"""
        for scene in self.current_project.scene_manager.scenes.values():
            if element in scene.elements:
                return scene
            for panel in scene.panels:
                if element == panel or element in panel.children:
                    return scene
        return None

    def find_element_by_id(self, element_id: str) -> Optional[UIElement]:
        """Find element by its ID in current scene"""
        scene = self.current_project.scene_manager.current_scene
        if not scene:
            return None
            
        # Check root elements
        for element in scene.elements:
            if element.name == element_id:
                return element
                
        # Check panels and their children
        for panel in scene.panels:
            if panel.name == element_id:
                return panel
            for child in panel.children:
                if child.name == element_id:
                    return child
        return None

    # --------------------------
    # Drawing Methods
    # --------------------------

    def redraw_canvas(self):
        """Redraw all UI elements on canvas"""
        self.canvas.delete("all")
        scene = self.current_project.scene_manager.current_scene
        if not scene:
            return
            
        # Draw scene background
        bg_color = scene.properties.get('background_color', "#333333")
        if isinstance(bg_color, tuple):
            bg_color = "#%02x%02x%02x" % tuple(int(c*255) for c in bg_color[:3])
        self.canvas.config(bg=bg_color)
        
        # Draw all elements
        for element in scene.elements + scene.panels:
            self._draw_element_recursive(element)

    def _draw_element_recursive(self, element: UIElement):
        """Recursively draw an element and its children"""
        if not element.visible:
            return
            
        x, y = element.get_absolute_position()
        
        # Draw element based on type
        if isinstance(element, (Panel, Button, TextBox)):
            bg_color = element.background_color
            if isinstance(bg_color, tuple):
                bg_color = "#%02x%02x%02x" % tuple(int(c*255) for c in bg_color[:3])
                
            self.canvas.create_rectangle(
                x, y, x + element.width, y + element.height,
                fill=bg_color,
                outline=element.border_color
            )
        
        if isinstance(element, (Button, Label, TextBox)):
            text_color = element.text_color
            if isinstance(text_color, tuple):
                text_color = "#%02x%02x%02x" % tuple(int(c*255) for c in text_color[:3])
                
            text = getattr(element, 'text', '')
            if text:
                self.canvas.create_text(
                    x + element.width/2, y + element.height/2,
                    text=text,
                    fill=text_color,
                    anchor=tk.CENTER
                )
        
        # Draw children
        for child in element.children:
            self._draw_element_recursive(child)

    def build_application(self):
        """Generate executable Python code"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".py",
            filetypes=[("Python files", "*.py"), ("All files", "*.*")],
            initialfile=f"{self.current_project.name.lower().replace(' ', '_')}_ui.py"
        )
        if not filename:
            return
            
        try:
            code = self.generate_python_code()
            with open(filename, 'w') as f:
                f.write(code)
            messagebox.showinfo("Success", f"Application built to {filename}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to build application: {str(e)}")

    def generate_python_code(self) -> str:
        """Generate Python code for the current UI"""
        # [Implementation of code generation would go here]
        # This would be similar to the original method
        return "# Generated UI code would go here"

# Main Application
if __name__ == "__main__":
    root = tk.Tk()
    editor = UIEditor(root)
    root.mainloop()
"}}}